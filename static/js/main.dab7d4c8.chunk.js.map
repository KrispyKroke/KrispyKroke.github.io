{"version":3,"sources":["Components/Description/Description.jsx","Components/MilesDisplay/MilesDisplay.jsx","Components/App/App.jsx","reportWebVitals.js","index.js"],"names":["Description","React","createElement","id","MilesDisplay","_useState","useState","_useState2","_slicedToArray","milesRemaining","setMilesRemaining","calculateMiles","timeLeft","Math","round","Date","now","useEffect","setInterval","className","toLocaleString","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"4QAeeA,MAZf,WAEI,OACIC,IAAAC,cAAA,OAAKC,GAAG,QACJF,IAAAC,cAAA,UAAI,yHC8BDE,MA/Bf,WAAwB,IAAAC,EAEwBC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAAjDI,EAAcF,EAAA,GAAEG,EAAiBH,EAAA,GAexC,SAASI,IACL,IAEMC,EAFyB,kBACRC,KAAKC,MAAMC,KAAKC,MAAQ,KAE/CN,EAAkBG,KAAKC,MAAiB,GAAXF,IAGjC,OAjBAK,oBAAU,WACNN,IACAO,YAAYP,EAAgB,MAC7B,IAeCV,IAAAC,cAAA,OAAKiB,UAAU,kBACXlB,IAAAC,cAAA,UAAKO,EAAeW,iBAAiB,6BChBlCC,MAVf,WAEE,OACEpB,IAAAC,cAAA,OAAKiB,UAAU,OACblB,IAAAC,cAACF,EAAW,MACZC,IAAAC,cAACE,EAAY,QCCJkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHtC,IAAAC,cAACD,IAAMuC,WAAU,KACfvC,IAAAC,cAACmB,EAAG,QAORC","file":"static/js/main.dab7d4c8.chunk.js","sourcesContent":["import React from 'react';\nimport './Description.css';\n\nfunction Description() {\n\n    return (\n        <div id='text'>\n            <h3>THIS SITE HAS THE MOST ACCURATE\n                MILE TRACKER FOR WHEN THE MILKY WAY \n                AND ANDROMEDA GALAXY WILL COLLIDE!\n            </h3>\n        </div>\n    )\n}\n\nexport default Description;","import React from 'react';\nimport './MilesDisplay.css';\n\nimport {useState, useEffect} from 'react';\n\n\nfunction MilesDisplay() {\n\n    const [milesRemaining, setMilesRemaining] = useState('');\n\n    // When the page is visited, the current number of miles remaining is \n    // calculated.  After that, the new distance is recalculated at an \n    // interval of 1 second for as long as the user is on the page.\n    useEffect(() => {\n        calculateMiles();\n        setInterval(calculateMiles, 1000);\n    }, []);\n\n    /* When this function is called, it uses a fixed reference date \n    and gets the time in seconds of both the collision date and \n    the current date since that reference date.  It then calculates\n    the difference between the two and uses that time to get the miles until\n    collision of the galaxies. */\n    function calculateMiles() {\n        const collisionDateInSeconds = 211856265808983360;\n        const todayInSeconds = Math.round(Date.now() / 1000);\n        const timeLeft = collisionDateInSeconds - todayInSeconds;\n        setMilesRemaining(Math.round(timeLeft * 69));\n    }\n\n    return (\n        <div className=\"MilesContainer\">\n            <h2>{milesRemaining.toLocaleString()} MILES UNTIL COLLISION!</h2>\n        </div>\n    );\n}\n\nexport default MilesDisplay;","import React from 'react';\nimport './App.css';\n\nimport Description from '../Description/Description.jsx';\nimport MilesDisplay from '../MilesDisplay/MilesDisplay';\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <Description />\n      <MilesDisplay />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './Components/App/App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}